hue.hours.m = melt(hue.hours, id.vars = c("hour", "city"))
head(hue.hours.m)
ggplot(hue.hours.m, aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable)
normalized.bin.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$H.mode.binned))))/nrow(df)
names(bin.counts) = paste0(names(bin.counts), ".normalized")
return(bin.counts)
}
hue.hours = ddply(dt, .(hour, city), normalized.bin.counts)
hue.hours.m = melt(hue.hours, id.vars = c("hour", "city"))
head(hue.hours.m)
ggplot(hue.hours.m, aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable)
normalized.bin.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$H.mode.binned))))/nrow(df+1)
names(bin.counts) = paste0(names(bin.counts), ".normalized")
return(bin.counts)
}
hue.hours = ddply(dt, .(hour, city), normalized.bin.counts)
hue.hours.m = melt(hue.hours, id.vars = c("hour", "city"))
ggplot(hue.hours.m, aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable)
ggplot(hue.hours.m, aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable, scales = "free")
table(hue.hours$hour)
normalized.bin.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$H.mode.binned))))/nrow(df)
names(bin.counts) = paste0(names(bin.counts), ".normalized")
return(bin.counts)
}
hue.hours = ddply(dt, .(hour, city), normalized.bin.counts)
hue.hours.m = melt(hue.hours, id.vars = c("hour", "city"))
head(hue.hours)
ggplot(subset(hue.hours.m, city == "san diego"), aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable, scales = "free")
unique(dt$V.mode)
dt$V.binned = cut(dt$V.mode, breaks = 16)
unique(dt$V.binned)
head(dt)
seq(from = 0, to = 255, by = 8)
seq(from = 0, to = 255, by = 16)
unique(dt$V.binned)
length(unique(dt$V.binned))
?cut
dt$V.binned = cut(dt$V.mode, breaks = 16, ordered_result = TRUE)
normalized.Value.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$V.binned))))/nrow(df)
names(bin.counts) = paste0(names(bin.counts), ".normalized")
return(bin.counts)
}
value.hours = ddply(dt, .(hour, city), normalized.Value.counts)
head(value.hours)
value.hours.m = melt(value.hours, id.vars = c("hour", "city"))
head(value.hours.m)
ggplot(value.hours.m, aes(x = hour, y = value, colour = city)) + geom_point() + facet_wrap(~variable, scales = "free")
head(value.hours)
head(value.hours)
normalized.Value.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$V.binned))))/nrow(df)
names(bin.counts) = paste0("V.bin.",c(0:ncol(bin.counts)), ".normalized")
return(bin.counts)
}
value.hours = ddply(dt, .(hour, city), normalized.Value.counts)
value.hours.m = melt(value.hours, id.vars = c("hour", "city"))
normalized.Value.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$V.binned))))/nrow(df)
names(bin.counts) = paste0("V.bin.",c(0:ncol(bin.counts)-1), ".normalized")
return(bin.counts)
}
value.hours = ddply(dt, .(hour, city), normalized.Value.counts)
value.hours.m = melt(value.hours, id.vars = c("hour", "city"))
normalized.Value.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$V.binned))))/nrow(df)
names(bin.counts) = paste0("V.bin.",c(0:ncol(bin.counts)-1), ".normalized")
return(bin.counts)
}
value.hours = ddply(dt, .(hour, city), normalized.Value.counts)
value.hours.m = melt(value.hours, id.vars = c("hour", "city"))
paste0("V.bin.",c(0:8), ".normalized")
normalized.Value.counts = function(df){
bin.counts = as.data.frame(t(as.matrix(table(df$V.binned))))/nrow(df)
names(bin.counts) = paste0("V.bin.",c(0:(ncol(bin.counts)-1)), ".normalized")
return(bin.counts)
}
value.hours = ddply(dt, .(hour, city), normalized.Value.counts)
value.hours.m = melt(value.hours, id.vars = c("hour", "city"))
head(value.hours)
p = ggplot(value.hours, aes(x = as.factor(hour), y = V.bin.0.normalized)) +
geom_point(size = .8) + facet_wrap(~city, scales = "free", nrow = 6) +
theme(strip.text.x = element_text(size = 6),
strip.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
print(p)
setwd("~/Documents/twitter-diurnal-analysis/")
write.csv(value.hours, file = "./data/value_hours.csv", row.names = FALSE, quote = FALSE)
## diurnal_faces_and_plots
##
library(data.table)
library(plyr)
library(ggplot2)
dt = fread("~/Documents/twitter_data_grant/processedData/Top_60_faces_alt_and_alt_tree_HSV_modes.csv", header = TRUE)
dt.clean = na.omit(dt)
normalized.num.faces = function(df){
return(data.frame(hour = df$hour[1], city = df$city[1],num.rows = nrow(df), num.faces = sum(df$num_faces_alt),
face.present = length(which(df$num_faces_alt > 0)), solo.face = length(which(df$num_faces_alt == 1)),
social.face = length(which(df$num_faces_alt > 1))))
}
faces.hours = ddply(dt.clean, .(hour, city), normalized.num.faces)
source('~/Documents/twitter-diurnal-analysis/scripts/visualization/diurnal_faces_and_plots.R')
write.csv(value.hours, file = "./data/face_hours.csv", row.names = FALSE, quote = FALSE)
write.csv(face.hours, file = "./data/face_hours.csv", row.names = FALSE, quote = FALSE)
write.csv(faces.hours, file = "./data/face_hours.csv", row.names = FALSE, quote = FALSE)
source('~/Documents/twitter-diurnal-analysis/scripts/visualization/diurnal-faces-and-HSV.R')
head(value.hours)
x <- data.frame(k1=c(NA,NA,3,4,5), k2=c(1,NA,NA,4,5), data=1:5)
y <- data.frame(k1=c(NA,2,NA,4,5), k2=c(NA,NA,3,4,5), data=1:5)
x
y
merge(x, y, by=c("k1","k2")) # NA's match
names(faces.hours)
names(value.hours)
dirunal.cities = merge(faces.hours, value.hours, by = c("hour", "city"))
head(dirunal.cities)
source('~/Documents/twitter-diurnal-analysis/scripts/visualization/diurnal-faces-and-HSV.R')
head(dirunal.cities)
head(faces.hours)
source('~/Documents/twitter-diurnal-analysis/scripts/visualization/diurnal-faces-and-HSV.R')
head(faces.hours)
head(dirunal.cities)
head(faces.hours[,-which(names(faces.hours) %in% c("hour", "city"))])
head(faces.hours)
faces.hours$normalied.face.present = faces.hours$face.present/faces.hours$num.rows
head(faces.hours)
source('~/Documents/twitter-diurnal-analysis/scripts/visualization/diurnal-faces-and-HSV.R')
names(dirunal.cities)
diurnal.basic = dirunal.cities[,c("hour", "city", "V.bin.0.normalized", "normalied.face.present")]
head(dirunal.cities)
head(diurnal.basic)
diurnal.m = melt(diurnal.basic, id.vars = c("hour", "city"))
head(dirunal.cities)
head(diurnal.m)
head(diurnal.m)
p = ggplot(diurnal.m, aes(x = as.factor(hour), y = value, colour = variable)) +
geom_point(size = .8) + facet_wrap(~city, scales = "free", nrow = 6) +
theme(strip.text.x = element_text(size = 6),
strip.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
print(p)
?ggsave
ggsave("~/Desktop/figure.png", plot = p)
ggsave("~/Desktop/figure.png", plot = p, width = 1904, height = 1608)
ggsave("~/Desktop/figure.png", plot = p)
ggsave("~/Desktop/figure.png", plot = p, width = 6, height = 5)
## just_count.R
##
library(dplyr)
setwd("~/Documents/misc_work/just_count/")
load("./data/enron_mysqldump.RData")
strcount <- function(x, pattern, split){
unlist(lapply(
strsplit(x, split),
function(z) na.omit(length(grep(pattern, z)))
))
}
head(message$body[1])
head(message$body[2])
head(message$body[2]
message$body[2]
message$body[3]
message$body[4]
message$body[765]
names(message)
message$sender[765]
txt = "hi, my names is justin"
strcount(tolower(txt), "just", " ")
strcount(tolower(txt), " just ", " ")
strcount(tolower(txt), "", " ")
source('~/Documents/misc_work/just_count/scripts/just_count.R')
ggplot(message, aes(x = word.count, y = beer.count)) + geom_point()
ggplot(message, aes(x = word.count, y = enron.count)) + geom_point()
txt = message$body[1]
strcount(tolower(txt), " enron ", " ")
txt
strcount(tolower(txt), "enron", " ")
strcount(tolower(txt), "enron ", " ")
txt = "hi, my names is justin"
strcount(tolower(txt), " justin", " ")
strcount(tolower(txt), " justin ", " ")
strcount(tolower(txt), "justin", " ")
strcount(tolower(txt), "just", " ")
strsplit(txt, split = "just")
strsplit(txt, split = "just ")
strsplit(txt, split = " ")
?grep
unlist(strsplit(txt, split = " "))
grep("just", "justin")
grep("just", "justin", fixed = TRUE)
grepl("just", "justin", fixed = TRUE)
unlist(strsplit(txt, split = " ")) -> res
res
res %in% "justin"
res %in% "just"
word.count <- function(x, word){
res = unlist(strsplit(x, split = " "))
num.word = length(which(res %in% word))
return(num.word)
}
txt
word.count(txt, "justin")
word.count(txt, "just")
word.count <- function(x, word){
res = unlist(strsplit(x, split = " "))
num.word = length(which(res %in% word))
return(num.word)
}
## just_count.R
##
library(dplyr)
setwd("~/Documents/misc_work/just_count/")
load("./data/enron_mysqldump.RData")
message$just.count = sapply(message$body, FUN = function(txt) word.count(txt, "just") )
message$word.count = sapply(message$body, FUN = function(txt) len(unlist(strsplit(txt, split = " "))))
message$char.count = sapply(message$body, nchar)
message$word.count = sapply(message$body, FUN = function(txt) length(unlist(strsplit(txt, split = " "))))
message$char.count = sapply(message$body, nchar)
# how does just count compare to a stop word count
message$the.count = sapply(message$body, FUN = function(txt)  word.count(txt, "the") )
# how does just count compare to a company-related word counts
message$lunch.count = sapply(message$body, FUN = function(txt)  word.count(txt, "lunch") )
source('~/Documents/misc_work/just_count/scripts/just_count.R')
ggplot(message, aes(x = word.count, y = beer.count)) + geom_point()
which(message$beer.count > 10)
message$body[which(message$beer.count > 10)]
message$body[which(message$beer.count > 9)]
ggplot(message, aes(x = word.count, y = lunch.count)) + geom_point()
ggplot(message, aes(x = word.count, y = just.count)) + geom_point()
message$body[which(message$just.count > 40)]
message$body[which(message$just.count > 40)]
ggplot(message, aes(x = word.count, y = the.count)) + geom_point()
ggplot(message, aes(x = the.count/word.count, y = just.count/word.count)) + geom_point()
message$body[which(message$just.count/message$word.count > .3)]
message$body[which(message$just.count/message$word.count > .2)]
message$body[which(message$just.count/message$word.count > .`)]
message$body[which(message$just.count/message$word.count > .1)]
message %>%
group_by(sender) %>%
summarise(median.just.count = median(just.count),
median.word.count = median(word.count),
median.char.count = median(chat.count),
median.the.count = median(the.count),
median.lunch.count = median(lunch.count),
median.dinner.count = median(dinner.count),
median.coffee.count = median(coffee.count),
median.beer.count = median(beer.count),
median.enron.count = median(enron.count)) -> as.data.frame(res)
message %>%
group_by(sender) %>%
summarise(median.just.count = median(just.count),
median.word.count = median(word.count),
median.char.count = median(chat.count),
median.the.count = median(the.count),
median.lunch.count = median(lunch.count),
median.dinner.count = median(dinner.count),
median.coffee.count = median(coffee.count),
median.beer.count = median(beer.count),
median.enron.count = median(enron.count)) -> res
median(message$word.count)
message %>%
group_by(sender) %>%
summarise(median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
#             median.char.count = median(chat.count),
#             median.the.count = median(the.count),
#             median.lunch.count = median(lunch.count),
#             median.dinner.count = median(dinner.count),
#             median.coffee.count = median(coffee.count),
#             median.beer.count = median(beer.count),
median.enron.count = median(as.numeric(enron.count))) -> res
head(res)
message %>%
group_by(sender) %>%
summarise(median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(chat.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) -> as.data.frame(res)
message$chat.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "chat") )
message %>%
group_by(sender) %>%
summarise(median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(chat.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) -> as.data.frame(res)
message %>%
group_by(sender) %>%
summarise(median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(chat.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) %>% as.data.frame() -> res
head(res)
ggplot(res, aes(x = median.word.count, y = median.just.count))
ggplot(res, aes(x = median.word.count, y = median.just.count)) + geom_point()
nrow(res)
gglot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
res$sender[which(res$median.just.count/res$median.word.count > .1)]
res$sender[which(res$median.just.count/res$median.word.count > .05)]
which(message$sender == becca-lynn@prodigy.net)
which(message$sender == "becca-lynn@prodigy.net")
message[which(message$sender == "becca-lynn@prodigy.net"),]
message[which(message$sender == "bani.arora@enron.com"),]
head(employeelist)
names(message)
head(res)
res.merged = merge(res, employeelist, by.x = "sender", by.y = "Email_id")
nrow(res.merged)
nrow(employeelist)
res.merged
head(res.merged)
ggplot(res.merged, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
names(res.merged)
head(res.merged)
summmary(res.merged$median.just.count)
summary(res.merged)
summary(res)
head(res[order(res$median.just.count, decreasing = TRUE), ])
head(res[order(res$median.just.count/res$median.word.count, decreasing = TRUE), ])
nrow(res)
nrow(res)*.2
head(res[order(res$median.just.count/res$median.word.count, decreasing = TRUE), ], 100)
employeelist$Email_id == "wendella.rhoads@enron.com"
which(employeelist$Email_id == "wendella.rhoads@enron.com")
ggplot(res.merged, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
library(plotly)
py <- plotly()
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count)) + geom_point()
response <- py$ggplotly(trace0, trace1, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count, label = sender)) + geom_point()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count, label = sender)) + geom_point() + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
head(res)
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.word.count/median.character.count, y = median.just.count/median.character.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.word.count/median.char.count, y = median.just.count/median.char.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.lunch.count/median.word.count, label = sender)) + geom_text()
print(p)
p = ggplot(res, aes(x = median.the.count/median.word.count, y = median.just.count/median.word.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(res, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
print(p)
message %>%
group_by(sender) %>%
summarise(median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(char.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) %>% as.data.frame() -> res
head(res)
p = ggplot(res, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
print(p)
names(res)
?grep
grep("enron", res$sender)
length(grep("enron", res$sender))
enron.emails = res[grep("enron", res$sender),]
head(enron.emails)
p = ggplot(enron.emails, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
print(p)
p = ggplot(res, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
p = ggplot(enron.emails, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-num-chars", fileopt="overwrite"))
res$email.type = "other"
res[grep("enron", res$sender),"email.type"] = "enron"
head(res)
enron.emails = subset(res, email.type == "enron")
head(enron.emails)
head(res)
p = ggplot(res, aes(x = median.char.count, y = median.just.count, label = sender, colour = email.type)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-the-rate", fileopt="overwrite"))
table(res$sender)
names(table(res$sender))
message %>%
group_by(sender) %>%
summarise(num.emails = n(),median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(char.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) %>% as.data.frame() -> res
head(res)
ggplot(res, aes(x = num.emails, y = median.just.count)) + geom_point()
head(res[order(res$num.emails, decreasing = TRUE), ])
head(res[order(res$num.emails, decreasing = TRUE), ], 100)
head(res[order(res$num.emails, decreasing = TRUE), ], 200)
head(res[order(res$num.emails, decreasing = TRUE), ], 300)
head(res[order(res$num.emails, decreasing = TRUE), ], 500)
head(res[order(res$num.emails, decreasing = TRUE), ], 1000)
ggplot(subset(res, num.emails > 2), aes(x = median.char.count, y = median.just.count)) + geom_point()
ggplot(res, aes(x = median.char.count, y = median.just.count)) + geom_point()
ggplot(res, aes(x = median.char.count, y = median.just.count, colour = email.type)) + geom_point()
res$email.type = "other"
res[grep("enron", res$sender),"email.type"] = "enron"
ggplot(res, aes(x = median.char.count, y = median.just.count, colour = email.type)) + geom_point()
nrow(subset(res, num.emails > 2))
res$sender
nrow(subset(res, num.emails > 4))
nrow(subset(res, num.emails > 3))
nrow(subset(res, num.emails > 5))
nrow(subset(res, num.emails > 10))
nrow(subset(res, num.emails > 20))
ggplot(subset(res, num.emails > 20), aes(x = median.char.count, y = median.just.count, colour = email.type)) + geom_point()
res.frequent = subset(res, num.emails > 2)
nrow(res.frequent)/nrow(res)
nrow(subset(res, num.emails > 3))/nrow(res)
nrow(subset(res, num.emails > 4))/nrow(res)
res.frequent = subset(res, num.emails > 4) # 5 or more emails gives us roughly 25% of all email addresses sent in data
py <- plotly()
p = ggplot(res.frequent, aes(x = median.char.count, y = median.just.count, label = sender, colour = email.type)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-char-counts", fileopt="overwrite"))
p = ggplot(res.frequent, aes(x = median.char.count, y = median.just.count, label = sender)) + geom_text()
response <- py$ggplotly(p, kwargs=list(filename="just-vs-char-counts", fileopt="overwrite"))
response <- py$ggplotly(p, kwargs=list(filename="just-vs-char-counts", fileopt="overwrite"))
head(res)
## just_count.R
##
library(dplyr)
library(plotly)
setwd("~/Documents/misc_work/just_count/")
## data processed and provided by Arne Hendrik Schulz
## http://www.ahschulz.de/enron-email-data/
load("./data/enron_mysqldump.RData")
## basic word count function
word.count <- function(x, word){
res = unlist(strsplit(x, split = " "))
num.word = length(which(res %in% word))
return(num.word)
}
## key stats
message$just.count = sapply(message$body, FUN = function(txt) word.count(tolower(txt), "just") )
message$word.count = sapply(message$body, FUN = function(txt) length(unlist(strsplit(txt, split = " "))))
message$char.count = sapply(message$body, nchar)
# how does just count compare to a stop word count
message$the.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "the") )
# how does just count compare to a company-related word counts
message$lunch.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "lunch") )
message$dinner.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "dinner") )
message$coffee.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "coffee") )
message$beer.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "beer") )
message$enron.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "enron") )
message$chat.count = sapply(message$body, FUN = function(txt)  word.count(tolower(txt), "chat") )
## aggregate counts by sender
message %>%
group_by(sender) %>%
summarise(num.emails = n(),median.just.count = median(as.numeric(just.count)),
median.word.count = median(as.numeric(word.count)),
median.char.count = median(as.numeric(char.count)),
median.the.count = median(as.numeric(the.count)),
median.lunch.count = median(as.numeric(lunch.count)),
median.dinner.count = median(as.numeric(dinner.count)),
median.coffee.count = median(as.numeric(coffee.count)),
median.beer.count = median(as.numeric(beer.count)),
median.enron.count = median(as.numeric(enron.count))) %>% as.data.frame() -> res
res$email.type = "other"
res[grep("enron", res$sender),"email.type"] = "enron"
## select only senders that are "active" in data set
res.frequent = subset(res, num.emails > 4) # 5 or more emails gives us roughly 25% of all email addresses sent in data
